using System.Diagnostics;
using System.Threading.Tasks;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using Microsoft.AspNetCore.Components.Forms;

namespace backend.Services
{
    public class FileConverter : IFileConverter
    {
        private readonly string _connectionString;
        private readonly string _containerName;

        public FileConverter(IConfiguration config)
        {
            _connectionString = config.GetValue<string>("AzureStorage:ConnectionString")!;
            _containerName = config.GetValue<string>("AzureStorage:ContainerName")!;
        }

        static void RunProcess(string exePath, string arguments)
        {
            var process = new Process();
            process.StartInfo.FileName = exePath;
            process.StartInfo.Arguments = arguments;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.RedirectStandardError = true;
            process.StartInfo.UseShellExecute = false;
            process.StartInfo.CreateNoWindow = true;

            //printing logs generated by ffmpeg
            process.OutputDataReceived += (s, e) => { if (e.Data != null) Console.WriteLine(e.Data); };
            process.ErrorDataReceived += (s, e) => { if (e.Data != null) Console.WriteLine(e.Data); };

            process.Start();
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();
            process.WaitForExit();
        }

        private async Task GetFile(string blobName, string targetDirectory)
        {
            if (!Directory.Exists(targetDirectory))
            {
                Directory.CreateDirectory(targetDirectory);
            }

            BlobServiceClient blobServiceClient = new BlobServiceClient(_connectionString);
            BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(_containerName);
            BlobClient blobClient = containerClient.GetBlobClient(blobName);

            await blobClient.DownloadToAsync(Path.Combine(targetDirectory, blobName));
        }

        private async Task UploadFileAsync(string blobName, string filePath, string targetDirectory)
        {
            BlobServiceClient blobServiceClient = new BlobServiceClient(_connectionString);
            BlobContainerClient containerClient = blobServiceClient.GetBlobContainerClient(_containerName);
            BlobClient blobClient = containerClient.GetBlobClient(string.Concat(targetDirectory,"/", blobName));

            await blobClient.UploadAsync(filePath);
        }

        private async Task UploadAllFilesAsync(string sourceDirectory, string targetDirectory)
        {
            var files = Directory.GetFiles(sourceDirectory);
            foreach (var file in files)
            {
                string blobName = Path.GetFileName(file);
                await UploadFileAsync(blobName, file, targetDirectory);
            }
        }

        public async Task CreateHlsPlaylistAsync(string sourceFile, string localDirectory, string targetDirectory)
        {
            //download video file from azure to temp directory
            await GetFile(sourceFile, localDirectory);

            var filesDirectory = Path.Combine(localDirectory, "files");

            string ffmpegPath = "ffmpeg";

            if (!Directory.Exists(filesDirectory))
            {
                Directory.CreateDirectory(filesDirectory);
            }

            
            var versions = new[]
            {
                new { Name = "1080p", Width = 1920, Height = 1080, Bitrate = 5000000},
                new { Name = "720p", Width = 1280, Height = 720, Bitrate = 2800000},
                new { Name = "480p", Width = 854, Height = 480, Bitrate = 1400000}
            };

            //create .ts segments and .m3u8 files 
            foreach (var version in versions)
            {
                string args = $"-i \"{Path.Combine(localDirectory,sourceFile)}\" -vf scale=w={version.Width}:h={version.Height} " +
                               $"-c:a aac -ar 48000 -c:v h264 -profile:v main -crf 20 -sc_threshold 0 " +
                               $"-g 48 -keyint_min 48 -hls_time 4 -hls_playlist_type vod " +
                               $"-hls_segment_filename \"{Path.Combine(filesDirectory, version.Name)}_%03d.ts\" " +
                               $"{Path.Combine(filesDirectory, version.Name)}.m3u8 " +
                               $"-b:v {version.Bitrate}";
                RunProcess(ffmpegPath, args);
            }

            //creating .m3u8 playlist
            string masterPlaylist = Path.Combine(filesDirectory, "master.m3u8");
            using (var sw = new StreamWriter(masterPlaylist, false))
            {
                sw.WriteLine("#EXTM3U");
                sw.WriteLine("#EXT-X-VERSION:3");

                foreach (var version in versions)
                {
                    sw.WriteLine($"#EXT-X-STREAM-INF:BANDWIDTH={version.Bitrate},RESOLUTION={version.Width}x{version.Height}");
                    sw.WriteLine($"{version.Name}.m3u8");
                }
            }

            //upload files from /temp directory to azure
            await UploadAllFilesAsync(filesDirectory, targetDirectory);
        }
    }
}
